syntax = "proto3";

package chat;

option go_package = "./pb";

service ChatService {
  rpc AddContact(AddContactRequest) returns (AddContactResponse) {}
  rpc RemoveContact(RemoveContactRequest) returns (RemoveContactResponse) {}
  rpc FetchContacts(FetchContactsRequest) returns (FetchContactsResponse) {}

  rpc CreateChat(CreateChatRequest) returns (CreateChatResponse) {}
  rpc FindChat(FindChatRequest) returns (FindChatResponse) {}
  rpc DeleteChat(DeleteChatRequest) returns (DeleteChatResponse) {}

  rpc AddMessage(AddMessageRequest) returns (AddMessageResponse) {}
  rpc FetchMessages(FetchMessagesRequest) returns (FetchMessagesResponse) {}
}

// Add contact

message AddContactRequest {
  int64 userId = 1;
  string token = 2;
  string handle = 3;
}

message AddContactResponse {
  int64 status = 1;
  string error = 2;
  int64 contactId = 3;
}

// Remove contact

message RemoveContactRequest {
  int64 userId = 1;
  string token = 2;
  string handle = 3;
}

message RemoveContactResponse {
  int64 status = 1;
  string error = 2;
}

// Fetch contacts

message FetchContactsRequest {
  int64 userId = 1;
  string token = 2;
}

message FetchContactsResponse {
  int64 status = 1;
  string error = 2;
  repeated UserContact contacts = 3;
}

message UserContact {
  int64 userId = 1;
  string handle = 2;
  optional bool approved = 3;
}


// CreateChat

message CreateChatRequest {
  int64 user1Id = 1;
  int64 user2Id = 2;
  string token = 3;
}

message CreateChatResponse {
  int64 status = 1;
  string error = 2;
  int64 chatId = 3;
}

// FindChat

message FindChatData {
  int64 chatId = 1;
}

message FindChatRequest {
  int64 user1Id = 1;
  int64 user2Id = 2;
  string token = 3;
}

message FindChatResponse {
  int64 status = 1;
  string error = 2;
  FindChatData data = 3;
}

// DeleteChat

message DeleteChatRequest {
  int64 chatId = 1;
  string token = 2;
}

message DeleteChatResponse {
  int64 status = 1;
  string error = 2;
}

// AddMessage

message AddMessageRequest {
  int64 userFromId = 1;
  int64 userToId = 2;
  string message = 3;
  string token = 4;
}

message AddMessageResponse {
  int64 status = 1;
  string error = 2;
}

message FetchMessagesRequest {
  int64 userFromId = 1;
  int64 userToId = 2;
  int64 count = 3;
  string token = 4;
}

message FetchMessagesResponse {
  int64 status = 1;
  string error = 2;
  repeated Message messages = 3;
}

message Message {
  int64 userOriginal = 1;
  string original = 2;
  int64 userTranslated = 3;
  string translated = 4;
}
